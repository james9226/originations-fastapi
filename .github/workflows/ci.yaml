name: CI
on:
  pull_request:
    types: [opened, reopened, synchronize]
  workflow_call:

env:
  SERVICE_NAME: default-service
  IMAGE_NAME: default-service-fastapi
  PROJECT: originations
  GCP_PROJECT_ID: firebase-svelte-381023


jobs:
  terraform:
    name: 'terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        cli_config_credentials_token: ${{ secrets.TERRAFORM_KEY }}

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      id : fmt 
      working-directory: ./infra
      run: terraform fmt -check

    # Initializes terraform
    - name: Terraform Init
      id : init 
      working-directory: ./infra
      run: terraform init
      
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
    
    # Generates an execution plan for Terraform
    - name: Terraform Plan
      id: plan
      working-directory: ./infra
      run: terraform plan -no-color -input=false
      continue-on-error: true
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}

    - name: Update Pull Request
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
      
          <details><summary>Show Plan</summary>
      
          \`\`\`terraform\n
          ${process.env.PLAN}
          \`\`\`
      
          </details>
      
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
      
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
        
  testing:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install poetry
        run: |
          pipx install poetry 
      - name: Setup Python
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
          cache: "poetry"

      - name: Install dependencies
        run: |
          poetry env use "3.10"
          poetry install --with dev --no-interaction 
      - name: Linting
        run : |
          poetry run black ./
      # - name: Type check # Currently very broken!
      #   run : |
      #     poetry run mypy ./
      - name: Test with pytest
        run: |
          poetry run pytest

  vulnerabilty-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk to check for vulnerabilities
        id: scan
        uses: snyk/actions/python@master
        continue-on-error: true # To make sure that SARIF upload gets called
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --sarif-file-output=snyk.sarif
      # - name: Upload result to GitHub Code Scanning
      #   uses: github/codeql-action/upload-sarif@v2
      #   with:
      #     sarif_file: snyk.sarif
      - name: Check on failures
        if: steps.scan.outcome != 'success'
        run: exit 1