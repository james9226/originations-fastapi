name: CD
on:
  push:
    branches:
      - main

env:
  SERVICE_NAME: default-service
  IMAGE_NAME: default-service-fastapi
  PROJECT: originations
  GCP_PROJECT_ID: firebase-svelte-381023

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    # Check if infrastructure has been changed
    - uses: dorny/paths-filter@v2
      id: filter
      with:
        base: ${{ github.ref }}
        filters: |
          infra-changed:
            - 'infra/**'

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      if: steps.filter.outputs.infra-changed == 'true'
      uses: hashicorp/setup-terraform@v1


    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      working-directory: ./infra
      if: steps.filter.outputs.infra-changed == 'true'
      run: terraform init
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      working-directory: ./infra
      if: steps.filter.outputs.infra-changed == 'true'
      run: terraform plan
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
        TF_VAR_PROJECT_ID : $GCP_PROJECT_ID

      # On push to main, build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      working-directory: ./infra
      if: steps.filter.outputs.infra-changed == 'true'
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}
        TF_VAR_PROJECT_ID : $GCP_PROJECT_ID

  deploy:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3


      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: '${{ secrets.GCR_DEVOPS_SERVICE_ACCOUNT_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'

      - name: Build docker image
        run: docker build --platform linux/amd64 -t $IMAGE_NAME:latest .

      - name: Tag docker image
        run: docker tag $IMAGE_NAME europe-west3-docker.pkg.dev/$GCP_PROJECT_ID/$PROJECT/$IMAGE_NAME

      - name: Configure GCloud Auth provider with Docker
        run: |
              gcloud auth configure-docker europe-west3-docker.pkg.dev

      - name: Push docker image to GCR
        run: docker push europe-west3-docker.pkg.dev/$GCP_PROJECT_ID/$PROJECT/$IMAGE_NAME

      - name: Deploy new docker image to prod
        run: |
          gcloud run deploy $SERVICE_NAME \
            --image europe-west3-docker.pkg.dev/$GCP_PROJECT_ID/$PROJECT/$IMAGE_NAME \
            --region europe-west3 \
            --port 80 \
            --memory 4Gi \
            --set-env-vars "project_id=$GCP_PROJECT_ID" \
            --set-env-vars "client_id=110549956928776510458" \
            --set-env-vars "client_x509_cert_url=https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-8v6my%40firebase-svelte-381023.iam.gserviceaccount.com" \
            --set-env-vars "firebase_private_key_id=${{ secrets.FIREBASE_PRIVATE_KEY_ID }}"  \
            --set-env-vars "firebase_client_email=${{ secrets.FIREBASE_CLIENT_EMAIL }}"